{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Philosophy","text":"<p>We\u2019ve all been there\u2014knee-deep in Django projects, juggling code, wrangling repositories, and trying to keep everything organized. That\u2019s where DjangoDIY comes in! Think of it as your very own DIY kit for Django projects. We\u2019ve put together some handy, reusable apps that come with all the basics pre-built. With just a few tweaks, you\u2019ll have your Django project up and running in no time\u2014saving you the headaches and giving you more time for coffee!</p>"},{"location":"#djangodiy-design-principles","title":"DjangoDIY Design Principles","text":"<p>Backend-First Flexibility:</p> <p>We\u2019re all about giving you control where it matters most\u2014your Django backend. DjangoDIY provides pre-built, reusable apps that let you tweak, edit, and expand your project\u2019s functionality without the headaches of starting from scratch. It\u2019s your project, your rules.</p> <p>Seamless Integration:</p> <p>No more hunting for scattered pieces of code. DjangoDIY apps integrate directly with your project\u2019s backend, giving you one cohesive system where all your editing and customizations live comfortably together.</p> <p>Empower the Admin:</p> <p>The power is in your hands\u2014or more specifically, in your admin dashboard. DjangoDIY apps come with intuitive integration with admin panel, allowing you to manage your content, users, and configurations effortlessly. Full control, zero hassle.</p> <p>Highly Customizable Functionality:</p> <p>Need to change how your blog works? Or add a custom feature to your user system? DjangoDIY\u2019s modular approach lets you adapt, extend, and customize your app\u2019s core functionality with minimal effort. Tailor it to your exact needs.</p> <p>Optimized for Developers:</p> <p>We know developers want efficiency and speed. DjangoDIY apps come with a clean, well-documented backend that is designed to keep your development workflow fast, smooth, and productive. Less time digging through code, more time building features.</p> <p>Accessible and Scalable:</p> <p>Whether you\u2019re building a simple blog or a complex project, DjangoDIY grows with you. Our apps are built to scale, ensuring your project can handle increased functionality and traffic as you expand.</p> <p>Open Source Freedom:</p> <p>DjangoDIY is proudly open-source. You maintain full ownership of your project\u2019s backend with no lock-ins. Feel free to modify, extend, and share\u2014our community thrives on collaboration. Licensed under BSD for maximum flexibility.</p> <p>With these principles, DjangoDIY empowers developers and users to take full control of their Django project\u2019s backend, providing the tools needed for scalable, customizable, and efficient development.</p>"},{"location":"docs/","title":"Welcome to DjangoDIY","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"docs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"docs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"docs/#building-an-app","title":"Building an app","text":""},{"location":"DiyTours/overview/","title":"DIYTours App Documentation","text":"<p>Welcome to the DIYTours app! This reusable Django app is designed for developers who want to manage and showcase tours seamlessly. With essential features like categories, locations, pricing, and a gallery for images, DIYTours helps you create a robust tour management system. Let\u2019s dive into how to install, integrate, and customize the app!</p>"},{"location":"DiyTours/overview/#table-of-contents","title":"Table of Contents","text":"<pre><code>1.  Features\n2.  Requirements\n3.  Installation\n4.  Setup in Django\n5.  Using DIYTours\n6.  Customizing the App\n7.  Deployment\n8.  Contribution\n</code></pre>"},{"location":"DiyTours/overview/#features","title":"Features","text":"<pre><code>\u2022   Tours Management: Create and manage various tours with details like title, description, and pricing.\n\u2022   Image Gallery: Upload and showcase images for each tour.\n\u2022   Categories and Locations: Organize tours by categories and locations for easy navigation.\n\u2022   Promotions: Add promotional prices for tours based on specific dates.\n\u2022   Comments: Allow users to leave comments on tours for engagement.\n</code></pre>"},{"location":"DiyTours/overview/#requirements","title":"Requirements","text":"<p>Before you start, ensure you have the following installed on your machine:</p> <pre><code>\u2022   Python 3.7 or higher\n\u2022   Django 5.0 or higher\n\u2022   Pillow (for handling images)\n\u2022   Git\n</code></pre>"},{"location":"DiyTours/overview/#installation","title":"Installation","text":"<p>To get started with DIYTours, you need to set up a Django project. Navigate to your desired directory and execute the following command to create a new project:</p> <pre><code>django-admin startproject ProjectName\n</code></pre> <p>This command creates a new directory with your project name. Next, clone the DIYTours repository by running:</p> <pre><code>git clone https://github.com/DjangoDIY/diytours.git\n</code></pre> <p>This downloads the DIYTours app into your current directory. Now, navigate into the DIYTours directory:</p> <pre><code>cd diytours\n</code></pre> <p>Move the App to Your Project</p> <p>Inside the diytour directory, you\u2019ll find the app\u2019s source code in a subdirectory named diytours. Move this directory into your Django project:</p> <pre><code>mv diytours /path/to_your_project/ProjectName\n</code></pre> <p>Update Your Django Project</p> <p>Now, go to your project directory and open the settings.py file. Add 'tours' to the INSTALLED_APPS list:</p> ProjectName/settings.py<pre><code>INSTALLED_APPS = [\n    'diytours',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n</code></pre> <p>Next, set up media files for the app. In the same settings.py, add the following configuration:</p> ProjectName/settings.py<pre><code>MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n</code></pre>"},{"location":"DiyTours/overview/#configure-urls","title":"Configure URLs","text":"<p>Open your project\u2019s urls.py file and include the URLs for the DIYTours app:</p> ProjectName/urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('tours/', include('tours.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre>"},{"location":"DiyTours/overview/#run-migrations","title":"Run Migrations","text":"<p>Now that your app is integrated, apply the migrations to create the necessary database tables:</p> <pre><code>python manage.py migrate\n</code></pre>"},{"location":"DiyTours/overview/#create-a-superuser","title":"Create a Superuser","text":"<p>Next, create a superuser to access the Django admin interface: <pre><code>python manage.py createsuperuser\n</code></pre> Follow the prompts to set up your superuser account. Once you log in to the admin panel, you\u2019ll see the DIYTours app ready for use.</p> <p>Start the Development Server</p> <p>Now, let\u2019s fire up the Django development server: <pre><code>python manage.py runserver\n</code></pre> And that\u2019s it! Your DIYTours app is now installed and fully functional. Happy touring!</p>"},{"location":"DiyTours/overview/#using-diytours","title":"Using DIYTours","text":"<p>Adding new tours is easy! Simply navigate to the Django admin panel at /admin, and under the Tours section, you can add new Categories, Tours, Dates, Promotions, and Images.</p> <pre><code>\u2022   Adding a New Tour: Upload a featured image for the tour and attach multiple images for the gallery.\n</code></pre>"},{"location":"DiyTours/overview/#customizing-the-app","title":"Customizing the App","text":"<p>If you want to make modifications to the app, here\u2019s how you can do it:</p> <p>Customizing the Models</p> <p>Open the models.py file in the tours app to modify existing models or add new fields. For example, if you want to add a custom field to the Tour model:</p> diytours/models.py<pre><code>class Tour(models.Model):\n    ...\n    custom_field = models.CharField(max_length=255, blank=True, null=True)\n</code></pre>"},{"location":"DiyTours/overview/#run-the-migrations-to-apply-your-changes","title":"Run the migrations to apply your changes:","text":"<pre><code>python manage.py makemigrations tours\npython manage.py migrate\n</code></pre>"},{"location":"DiyTours/overview/#template-customization","title":"Template Customization","text":"<p>The app uses templates to render tour details. To customize the look and feel, you can override the default templates. Create a directory templates/tours/ in your project and add a details.html file.</p> <p>Example content for details.html: index.html<pre><code>{% extends 'base.html' %}\n{% block content %}\n    &lt;h1&gt;{{ tour.title }}&lt;/h1&gt;\n    &lt;div class=\"gallery\"&gt;\n        &lt;img src=\"{{ tour.featured_image.url }}\" alt=\"{{ tour.title }} image\"&gt;\n        {% for image in tour.images.all %}\n            &lt;img src=\"{{ image.image.url }}\" alt=\"Additional image\"&gt;\n        {% endfor %}\n    &lt;/div&gt;\n    &lt;p&gt;{{ tour.description }}&lt;/p&gt;\n{% endblock %}\n</code></pre></p>"},{"location":"DiyTours/overview/#deployment","title":"Deployment","text":"<p>When you\u2019re ready to deploy your app, consider the following:</p> <ol> <li>Static and Media Files: Configure your web server (like Nginx) to serve static and media files.</li> <li>Security: Set DEBUG = False and update ALLOWED_HOSTS in your settings.py.</li> <li>Database: Use a production database like PostgreSQL and update the DATABASES setting.</li> <li>Collect Static Files: Run the command to collect all static files for production use:</li> </ol> <p>python manage.py collectstatic</p>"},{"location":"DiyTours/overview/#contribution","title":"Contribution","text":"<p>We welcome contributions to the DIYTours app! Here\u2019s how you can contribute:</p> <ol> <li>Fork the repository.</li> <li> <p>Create a new branch for your feature: <pre><code>git checkout -b feature-branch\n</code></pre></p> </li> <li> <p>Make your changes and commit: <pre><code>            git commit -m \"Added a new feature\"\n</code></pre></p> </li> <li> <p>Push to your branch: <pre><code>            git push origin feature-branch\n</code></pre></p> </li> <li> <p>Submit a pull request for review.</p> </li> </ol>"},{"location":"diyblog/blog/","title":"DIYBlog App Documentation","text":"<p>Welcome to the DIYBlog app! DIYBlog is a reusable Django app that provides essential blogging functionality such as posts, categories, tags, and comments. This app is designed for developers with basic knowledge of Python and Django. Follow the instructions below to install and integrate DIYBlog into your Django project.</p>"},{"location":"diyblog/blog/#sections","title":"Sections","text":"<pre><code>1.  Features\n2.  Requirements\n3.  Installation\n4.  Setup in Django\n5.  Usage\n6.  License\n</code></pre>"},{"location":"diyblog/blog/#features","title":"Features","text":"<pre><code>\u2022   Posts: Create and manage blog posts.\n\u2022   Categories: Organize posts by category.\n\u2022   Tags: Tag posts for easy filtering.\n\u2022   Comments: Allow readers to leave comments on posts.\n</code></pre>"},{"location":"diyblog/blog/#requirements","title":"Requirements","text":"<pre><code>\u2022   Python 3.10 or higher\n\u2022   Django 4.x or higher\n</code></pre>"},{"location":"diyblog/blog/#installation","title":"Installation","text":"<p>To start using DIYBlog, you\u2019ll first need to set up a Django project. Navigate to your desired directory and execute the following command to start a new project:</p> <p>startting project<pre><code>django-admin startproject ProjectName\n</code></pre> This command creates a new directory with your project name. Now, to integrate the DIYBlog app into your project, clone the repository by running:</p> <p><pre><code>git clone https://github.com/DjangoDIY/diyblog.git\n</code></pre> This will download the DIYBlog app into your current directory. The next step is to move the app into your Django project. Navigate to the diyblog directory:</p> <p><pre><code>cd diyblog\n</code></pre> Inside this directory, you\u2019ll find the app\u2019s source code in a subdirectory named diyblog. Move this directory into your Django project:</p> <pre><code>mv diyblog /path/to_your_project/ProjectName\n</code></pre> <p>Once the app is moved, head over to your project directory and open the settings.py file. Under the INSTALLED_APPS section, add 'diyblog' as shown below:</p> ProjectName/settings.py<pre><code>INSTALLED_APPS = [\n    'diyblog',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n</code></pre> <p>Now, we need to set up the URLs for DIYBlog. Open your project\u2019s urls.py file and include the DIYBlog app\u2019s URLs:</p> ProjectName/urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"blog/\",include(\"diyblog.urls\"))\n\n]\n</code></pre> <p>At this point, the DIYBlog app is integrated into your project. To complete the setup, you need to run migrations to create the necessary database tables.</p>"},{"location":"diyblog/blog/#migrations","title":"Migrations","text":"<p>Run the following command to apply migrations:</p> <pre><code>python manage.py migrate\n</code></pre> <p>If the migrations run successfully, you should see output similar to the following:</p> <pre><code>  Applying auth.0012_alter_user_first_name_max_length... OK\n  Applying blog.0001_initial... OK\n  Applying blog.0002_post_category... OK\n  Applying sessions.0001_initial... OK\n</code></pre>"},{"location":"diyblog/blog/#superuser-setup","title":"Superuser Setup","text":"<p>Next, create a superuser to access the Django admin interface:</p> <p><pre><code>python manage.py createsuperuser\n</code></pre> Follow the on-screen prompts to create the superuser. After logging in to the admin panel, you should see the DIYBlog app ready for use.</p> <p>Now let's fire up our Django Runserver</p> <pre><code>python manage.py runserver\n</code></pre> <p>And that\u2019s it! Your DIYBlog app is now installed and fully functional.</p> <p>Happy Blogging!</p> <p>The basic usage of DIYBlog is already setup, the following section is for advance modifications of the app. The basic version of app does contains all the features required to setup the blogging app, however we understand that when it comes to developing projects its not like one shoe size fits all, so DjangoDIY provides functionality to modify the basic code structure as per your own need, Its our philosophy your project your rules.</p>"}]}